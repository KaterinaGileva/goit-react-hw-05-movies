{"version":3,"file":"static/js/738.aebfd9e4.chunk.js","mappings":"gRAEaA,EAAYC,EAAAA,GAAAA,GAAH,iKAQTC,EAAYD,EAAAA,GAAAA,GAAH,8ZAgBTE,EAAaF,EAAAA,GAAAA,IAAH,kJASVG,EAAcH,EAAAA,GAAAA,EAAH,4NAYXI,EAASJ,EAAAA,GAAAA,GAAH,8D,mBCxCJ,SAASK,IACtB,IAAQC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAeE,OAbFC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAWN,GACRO,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcJ,EAAWI,EAAKC,QAA9B,IACLC,OAAM,SAAAC,GAAK,OACVC,IAAAA,OAAAA,QACE,oDAFQ,GAKf,GAAE,CAACZ,KAMA,8BACGG,EAAQU,OAAS,GAClB,SAACpB,EAAD,UACGU,EAAQW,KAAI,gBAAGd,EAAH,EAAGA,GAAIe,EAAP,EAAOA,OAAQC,EAAf,EAAeA,eAAgBC,EAA/B,EAA+BA,QAA/B,OACX,UAACtB,EAAD,YACE,SAACC,EAAD,CACEsB,IACEF,EAAeG,YAAf,0CACuCH,EAAeG,aAClDC,EAENC,IAAKN,EACLO,MAAO,WAET,UAACxB,EAAD,WAASiB,EAAT,QACA,UAAClB,EAAD,WAAcoB,EAAd,SAXcjB,EADL,OAiBf,SAACH,EAAD,0DAIL,C,sKC/CG0B,EAAW,gCACXC,EAAU,4CAEHC,EAAc,kBACzBC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,2BAAwCC,GADf,EAGdG,EAAe,SAAAC,GAAO,OACjCF,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BK,GAA9B,OAAwCJ,GADP,EAGtBK,EAAmB,SAAAC,GAAK,OACnCJ,EAAAA,EAAAA,IAAA,UAAaH,EAAb,uBAAoCC,EAApC,kBAAqDM,GADlB,EAGxBC,EAAU,SAAAH,GAAO,OAC5BF,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BK,EAA9B,mBAAgDJ,GADpB,EAGflB,EAAa,SAAAsB,GAAO,OACjCF,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BK,EAA9B,mBAAgDJ,GADf,C","sources":["components/Reviews/Rewiews.styled.js","components/Reviews/Reviews.jsx","service/API.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewsUl = styled.ul`\n  display: flex;\n  flex-direction: column;\n  padding: 20px 50px;\n  margin-bottom: 20px;\n  padding: 20px 0 0 0;\n  list-style: none;\n`;\nexport const ReviewsLi = styled.li`\n  margin-bottom: 20px;\n  padding: 5px;\n  border: 4px solid blue;\n  border-radius: 8px;\n  box-shadow: 0px 4px 3px 0px rgba(246, 0, 0, 0.2),\n    4px 4px 4px 0px rgba(246, 247, 245, 0.14),\n    0px 2px 1px -1px rgba(246, 247, 245, 0.12);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  background-color:white;\n\n  // :hover {\n  //   transform: scale(1.02);\n  //   }\n`;\nexport const ReviewsImg = styled.img`\n  display: block;\n  margin: 5px 15px;\n  height: 50%;\n  object-fit: cover;\n  overflow: hidden;\n  border-radius: 8px;\n`;\n\nexport const ReviewsText = styled.p`\n  text-decoration: none;\n  cursor: pointer;\n  font-family: inherit;\n  font-size: 18px;\n  line-height: 24px;\n  font-style: normal;\n  font-weight: 500;\n  color: #0B0B61;\n  padding: 0 15px;\n`;\n\nexport const Title3 = styled.h3`\n  color: blue;\n  padding: 5px 15px;\n`;","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getReviews } from \"service/API\";\nimport Notiflix from \"notiflix\";\nimport { ReviewsImg, ReviewsLi, ReviewsText, ReviewsUl, Title3 } from \"./Rewiews.styled\";\nimport NoImage from 'images/noImag.png';\n\nexport default function Reviews() {\n  const { id } = useParams();\n  const [reviews, setReviews] = useState([]);\n  \n  useEffect(() => {\n    getReviews(id)\n      .then(({ data }) => setReviews(data.results))\n      .catch(error =>\n        Notiflix.Notify.warning(\n          'Sorry, something went wrong.... Please try again.'\n        )\n      );\n  }, [id]);\n\n  //if (!reviews) {\n   // return null;\n  //}\n    return (\n      <>\n        {reviews.length > 0 ? (\n        <ReviewsUl>\n          {reviews.map(({ id, author, author_details, content }) => (\n            <ReviewsLi key={id}>\n              <ReviewsImg\n                src={\n                  author_details.avatar_path\n                    ? `https://image.tmdb.org/t/p/w500/${author_details.avatar_path}`\n                    : NoImage\n                }\n                alt={author}\n                width={'100px'}\n              />\n              <Title3>{author} </Title3>\n              <ReviewsText>{content} </ReviewsText>\n            </ReviewsLi>\n          ))}\n        </ReviewsUl>\n      ) : (\n        <ReviewsText>We do not have any reviews for this movie.</ReviewsText>\n      )}\n      </>\n    );\n  };\n\n  ","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '?api_key=0fe38363eb34760457702cbb346d2d7a';\n\nexport const getTrending = () =>\n  axios.get(`${BASE_URL}trending/all/day${API_KEY}`);\n\nexport const getMovieById = movieId =>\n  axios.get(`${BASE_URL}movie/${movieId}${API_KEY}`);\n\nexport const getMovieBySearch = query =>\n  axios.get(`${BASE_URL}search/movie${API_KEY}&query=${query}`);\n\nexport const getCast = movieId =>\n  axios.get(`${BASE_URL}movie/${movieId}/credits${API_KEY}`);\n  \n  export const getReviews = movieId =>\n  axios.get(`${BASE_URL}movie/${movieId}/reviews${API_KEY}`);"],"names":["ReviewsUl","styled","ReviewsLi","ReviewsImg","ReviewsText","Title3","Reviews","id","useParams","useState","reviews","setReviews","useEffect","getReviews","then","data","results","catch","error","Notiflix","length","map","author","author_details","content","src","avatar_path","NoImage","alt","width","BASE_URL","API_KEY","getTrending","axios","getMovieById","movieId","getMovieBySearch","query","getCast"],"sourceRoot":""}